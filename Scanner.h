// Generated by Flexc++ V0.98.00 on Mon, 04 Mar 2013 21:46:01 -0800

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "Scannerbase.h"
#include "Parserbase.h"
#include <string>
#include <iostream>

// $insert classHead
class Scanner: public ScannerBase
{
    public:
        explicit Scanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Scanner(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

        size_t columnNr() const;
        void setLoc(Parser::LTYPE__ *);
        void setSval(Parser::STYPE__ *);
        void setVerbosity(int verboseLevel);
        void printInfo(int level, std::string msg);

        char linebuf[500];

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        int verbosity;
        size_t columnNr__;
        Parser::LTYPE__ * lloc;
        Parser::STYPE__ * sval;

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts
	void comment();
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{
    verbosity = 0;
    columnNr__ = 1;
    setDebug(false);
}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile)
{
    verbosity = 0;
    columnNr__ = 1;
    setDebug(false);
}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex__();
}

inline void Scanner::preCode() 
{
    int len = length();

    lloc->first_line = lloc->last_line = lineNr();
    lloc->first_column = lloc->last_column = columnNr__ + len;
    columnNr__ += len;
}

inline void Scanner::print() 
{
    print__();
}

#endif // Scanner_H_INCLUDED_

