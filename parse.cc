// Generated by Bisonc++ V4.01.00 on Wed, 06 Mar 2013 15:20:34 -0800

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {318, 1}, // 1: translation_unit ->  external_declaration
     {318, 2}, // 2: translation_unit ->  translation_unit external_declaration
     {319, 1}, // 3: external_declaration ->  function_definition
     {319, 1}, // 4: external_declaration ->  declaration
     {320, 2}, // 5: function_definition ->  declarator compound_statement
     {320, 3}, // 6: function_definition ->  declarator declaration_list compound_statement
     {320, 3}, // 7: function_definition ->  declaration_specifiers declarator compound_statement
     {320, 4}, // 8: function_definition ->  declaration_specifiers declarator declaration_list compound_statement
     {321, 2}, // 9: declaration (';') ->  declaration_specifiers ';'
     {321, 3}, // 10: declaration (';') ->  declaration_specifiers init_declarator_list ';'
     {324, 1}, // 11: declaration_list ->  declaration
     {324, 2}, // 12: declaration_list ->  declaration_list declaration
     {325, 1}, // 13: declaration_specifiers ->  storage_class_specifier
     {325, 2}, // 14: declaration_specifiers ->  storage_class_specifier declaration_specifiers
     {325, 1}, // 15: declaration_specifiers ->  type_specifier
     {325, 2}, // 16: declaration_specifiers ->  type_specifier declaration_specifiers
     {325, 1}, // 17: declaration_specifiers ->  type_qualifier
     {325, 2}, // 18: declaration_specifiers ->  type_qualifier declaration_specifiers
     {327, 1}, // 19: storage_class_specifier (AUTO) ->  AUTO
     {327, 1}, // 20: storage_class_specifier (REGISTER) ->  REGISTER
     {327, 1}, // 21: storage_class_specifier (STATIC) ->  STATIC
     {327, 1}, // 22: storage_class_specifier (EXTERN) ->  EXTERN
     {327, 1}, // 23: storage_class_specifier (TYPEDEF) ->  TYPEDEF
     {328, 1}, // 24: type_specifier (VOID) ->  VOID
     {328, 1}, // 25: type_specifier (CHAR) ->  CHAR
     {328, 1}, // 26: type_specifier (SHORT) ->  SHORT
     {328, 1}, // 27: type_specifier (INT) ->  INT
     {328, 1}, // 28: type_specifier (LONG) ->  LONG
     {328, 1}, // 29: type_specifier (FLOAT) ->  FLOAT
     {328, 1}, // 30: type_specifier (DOUBLE) ->  DOUBLE
     {328, 1}, // 31: type_specifier (SIGNED) ->  SIGNED
     {328, 1}, // 32: type_specifier (UNSIGNED) ->  UNSIGNED
     {328, 1}, // 33: type_specifier ->  struct_or_union_specifier
     {328, 1}, // 34: type_specifier ->  enum_specifier
     {328, 1}, // 35: type_specifier (TYPEDEF_NAME) ->  TYPEDEF_NAME
     {329, 1}, // 36: type_qualifier (CONST) ->  CONST
     {329, 1}, // 37: type_qualifier (VOLATILE) ->  VOLATILE
     {330, 5}, // 38: struct_or_union_specifier ('{') ->  struct_or_union identifier '{' struct_declaration_list '}'
     {330, 4}, // 39: struct_or_union_specifier ('{') ->  struct_or_union '{' struct_declaration_list '}'
     {330, 2}, // 40: struct_or_union_specifier ->  struct_or_union identifier
     {332, 1}, // 41: struct_or_union (STRUCT) ->  STRUCT
     {332, 1}, // 42: struct_or_union (UNION) ->  UNION
     {334, 1}, // 43: struct_declaration_list ->  struct_declaration
     {334, 2}, // 44: struct_declaration_list ->  struct_declaration_list struct_declaration
     {326, 1}, // 45: init_declarator_list ->  init_declarator
     {326, 3}, // 46: init_declarator_list (',') ->  init_declarator_list ',' init_declarator
     {336, 1}, // 47: init_declarator ->  declarator
     {336, 3}, // 48: init_declarator ('=') ->  declarator '=' initializer
     {335, 3}, // 49: struct_declaration (';') ->  specifier_qualifier_list struct_declarator_list ';'
     {338, 1}, // 50: specifier_qualifier_list ->  type_specifier
     {338, 2}, // 51: specifier_qualifier_list ->  type_specifier specifier_qualifier_list
     {338, 1}, // 52: specifier_qualifier_list ->  type_qualifier
     {338, 2}, // 53: specifier_qualifier_list ->  type_qualifier specifier_qualifier_list
     {339, 1}, // 54: struct_declarator_list ->  struct_declarator
     {339, 3}, // 55: struct_declarator_list (',') ->  struct_declarator_list ',' struct_declarator
     {340, 1}, // 56: struct_declarator ->  declarator
     {340, 2}, // 57: struct_declarator (':') ->  ':' constant_expression
     {340, 3}, // 58: struct_declarator (':') ->  declarator ':' constant_expression
     {331, 4}, // 59: enum_specifier (ENUM) ->  ENUM '{' enumerator_list '}'
     {331, 5}, // 60: enum_specifier (ENUM) ->  ENUM identifier '{' enumerator_list '}'
     {331, 2}, // 61: enum_specifier (ENUM) ->  ENUM identifier
     {342, 1}, // 62: enumerator_list ->  enumerator
     {342, 3}, // 63: enumerator_list (',') ->  enumerator_list ',' enumerator
     {343, 1}, // 64: enumerator ->  identifier
     {343, 3}, // 65: enumerator ('=') ->  identifier '=' constant_expression
     {322, 1}, // 66: declarator ->  direct_declarator
     {322, 2}, // 67: declarator ->  pointer direct_declarator
     {344, 1}, // 68: direct_declarator ->  identifier
     {344, 3}, // 69: direct_declarator ('(') ->  '(' declarator ')'
     {344, 3}, // 70: direct_declarator ('[') ->  direct_declarator '[' ']'
     {344, 4}, // 71: direct_declarator ('[') ->  direct_declarator '[' constant_expression ']'
     {344, 3}, // 72: direct_declarator ('(') ->  direct_declarator '(' ')'
     {344, 4}, // 73: direct_declarator ('(') ->  direct_declarator '(' parameter_type_list ')'
     {344, 4}, // 74: direct_declarator ('(') ->  direct_declarator '(' identifier_list ')'
     {345, 1}, // 75: pointer ('*') ->  '*'
     {345, 2}, // 76: pointer ('*') ->  '*' type_qualifier_list
     {345, 2}, // 77: pointer ('*') ->  '*' pointer
     {345, 3}, // 78: pointer ('*') ->  '*' type_qualifier_list pointer
     {348, 1}, // 79: type_qualifier_list ->  type_qualifier
     {348, 2}, // 80: type_qualifier_list ->  type_qualifier_list type_qualifier
     {346, 1}, // 81: parameter_type_list ->  parameter_list
     {346, 3}, // 82: parameter_type_list (',') ->  parameter_list ',' ELIPSIS
     {349, 1}, // 83: parameter_list ->  parameter_declaration
     {349, 3}, // 84: parameter_list (',') ->  parameter_list ',' parameter_declaration
     {350, 2}, // 85: parameter_declaration ->  declaration_specifiers declarator
     {350, 1}, // 86: parameter_declaration ->  declaration_specifiers
     {350, 2}, // 87: parameter_declaration ->  declaration_specifiers abstract_declarator
     {347, 1}, // 88: identifier_list ->  identifier
     {347, 3}, // 89: identifier_list (',') ->  identifier_list ',' identifier
     {337, 1}, // 90: initializer ->  assignment_expression
     {337, 3}, // 91: initializer ('{') ->  '{' initializer_list '}'
     {337, 4}, // 92: initializer ('{') ->  '{' initializer_list ',' '}'
     {353, 1}, // 93: initializer_list ->  initializer
     {353, 3}, // 94: initializer_list (',') ->  initializer_list ',' initializer
     {354, 1}, // 95: type_name ->  specifier_qualifier_list
     {354, 2}, // 96: type_name ->  specifier_qualifier_list abstract_declarator
     {351, 1}, // 97: abstract_declarator ->  pointer
     {351, 1}, // 98: abstract_declarator ->  direct_abstract_declarator
     {351, 2}, // 99: abstract_declarator ->  pointer direct_abstract_declarator
     {355, 3}, // 100: direct_abstract_declarator ('(') ->  '(' abstract_declarator ')'
     {355, 2}, // 101: direct_abstract_declarator ('[') ->  '[' ']'
     {355, 3}, // 102: direct_abstract_declarator ('[') ->  '[' constant_expression ']'
     {355, 3}, // 103: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' ']'
     {355, 4}, // 104: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' constant_expression ']'
     {355, 2}, // 105: direct_abstract_declarator ('(') ->  '(' ')'
     {355, 3}, // 106: direct_abstract_declarator ('(') ->  '(' parameter_type_list ')'
     {355, 3}, // 107: direct_abstract_declarator ('(') ->  direct_abstract_declarator '(' ')'
     {355, 4}, // 108: direct_abstract_declarator ('(') ->  direct_abstract_declarator '(' parameter_type_list ')'
     {356, 1}, // 109: statement ->  labeled_statement
     {356, 1}, // 110: statement ->  compound_statement
     {356, 1}, // 111: statement ->  expression_statement
     {356, 1}, // 112: statement ->  selection_statement
     {356, 1}, // 113: statement ->  iteration_statement
     {356, 1}, // 114: statement ->  jump_statement
     {357, 3}, // 115: labeled_statement (':') ->  identifier ':' statement
     {357, 4}, // 116: labeled_statement (CASE) ->  CASE constant_expression ':' statement
     {357, 3}, // 117: labeled_statement (DEFAULT) ->  DEFAULT ':' statement
     {358, 1}, // 118: expression_statement (';') ->  ';'
     {358, 2}, // 119: expression_statement (';') ->  expression ';'
     {323, 2}, // 120: compound_statement ('{') ->  '{' '}'
     {323, 3}, // 121: compound_statement ('{') ->  '{' statement_list '}'
     {323, 3}, // 122: compound_statement ('{') ->  '{' declaration_list '}'
     {323, 4}, // 123: compound_statement ('{') ->  '{' declaration_list statement_list '}'
     {363, 1}, // 124: statement_list ->  statement
     {363, 2}, // 125: statement_list ->  statement_list statement
     {359, 5}, // 126: selection_statement (IF) ->  IF '(' expression ')' statement
     {359, 7}, // 127: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
     {359, 5}, // 128: selection_statement (SWITCH) ->  SWITCH '(' expression ')' statement
     {360, 5}, // 129: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
     {360, 7}, // 130: iteration_statement (DO) ->  DO statement WHILE '(' expression ')' ';'
     {360, 6}, // 131: iteration_statement (FOR) ->  FOR '(' ';' ';' ')' statement
     {360, 7}, // 132: iteration_statement (FOR) ->  FOR '(' ';' ';' expression ')' statement
     {360, 7}, // 133: iteration_statement (FOR) ->  FOR '(' ';' expression ';' ')' statement
     {360, 8}, // 134: iteration_statement (FOR) ->  FOR '(' ';' expression ';' expression ')' statement
     {360, 7}, // 135: iteration_statement (FOR) ->  FOR '(' expression ';' ';' ')' statement
     {360, 8}, // 136: iteration_statement (FOR) ->  FOR '(' expression ';' ';' expression ')' statement
     {360, 8}, // 137: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' ')' statement
     {360, 9}, // 138: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
     {361, 3}, // 139: jump_statement (GOTO) ->  GOTO identifier ';'
     {361, 2}, // 140: jump_statement (CONTINUE) ->  CONTINUE ';'
     {361, 2}, // 141: jump_statement (BREAK) ->  BREAK ';'
     {361, 2}, // 142: jump_statement (RETURN) ->  RETURN ';'
     {361, 3}, // 143: jump_statement (RETURN) ->  RETURN expression ';'
     {362, 1}, // 144: expression ->  assignment_expression
     {362, 3}, // 145: expression (',') ->  expression ',' assignment_expression
     {352, 1}, // 146: assignment_expression ->  conditional_expression
     {352, 3}, // 147: assignment_expression ->  unary_expression assignment_operator assignment_expression
     {366, 1}, // 148: assignment_operator ('=') ->  '='
     {366, 1}, // 149: assignment_operator (MUL_ASSIGN) ->  MUL_ASSIGN
     {366, 1}, // 150: assignment_operator (DIV_ASSIGN) ->  DIV_ASSIGN
     {366, 1}, // 151: assignment_operator (MOD_ASSIGN) ->  MOD_ASSIGN
     {366, 1}, // 152: assignment_operator (ADD_ASSIGN) ->  ADD_ASSIGN
     {366, 1}, // 153: assignment_operator (SUB_ASSIGN) ->  SUB_ASSIGN
     {366, 1}, // 154: assignment_operator (LEFT_ASSIGN) ->  LEFT_ASSIGN
     {366, 1}, // 155: assignment_operator (RIGHT_ASSIGN) ->  RIGHT_ASSIGN
     {366, 1}, // 156: assignment_operator (AND_ASSIGN) ->  AND_ASSIGN
     {366, 1}, // 157: assignment_operator (XOR_ASSIGN) ->  XOR_ASSIGN
     {366, 1}, // 158: assignment_operator (OR_ASSIGN) ->  OR_ASSIGN
     {364, 1}, // 159: conditional_expression ->  logical_or_expression
     {364, 5}, // 160: conditional_expression ('?') ->  logical_or_expression '?' expression ':' conditional_expression
     {341, 1}, // 161: constant_expression ->  conditional_expression
     {367, 1}, // 162: logical_or_expression ->  logical_and_expression
     {367, 3}, // 163: logical_or_expression (OR_OP) ->  logical_or_expression OR_OP logical_and_expression
     {368, 1}, // 164: logical_and_expression ->  inclusive_or_expression
     {368, 3}, // 165: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP inclusive_or_expression
     {369, 1}, // 166: inclusive_or_expression ->  exclusive_or_expression
     {369, 3}, // 167: inclusive_or_expression ('|') ->  inclusive_or_expression '|' exclusive_or_expression
     {370, 1}, // 168: exclusive_or_expression ->  and_expression
     {370, 3}, // 169: exclusive_or_expression ('^') ->  exclusive_or_expression '^' and_expression
     {371, 1}, // 170: and_expression ->  equality_expression
     {371, 3}, // 171: and_expression ('&') ->  and_expression '&' equality_expression
     {372, 1}, // 172: equality_expression ->  relational_expression
     {372, 3}, // 173: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
     {372, 3}, // 174: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
     {373, 1}, // 175: relational_expression ->  shift_expression
     {373, 3}, // 176: relational_expression ('<') ->  relational_expression '<' shift_expression
     {373, 3}, // 177: relational_expression ('>') ->  relational_expression '>' shift_expression
     {373, 3}, // 178: relational_expression (LE_OP) ->  relational_expression LE_OP shift_expression
     {373, 3}, // 179: relational_expression (GE_OP) ->  relational_expression GE_OP shift_expression
     {374, 1}, // 180: shift_expression ->  additive_expression
     {374, 3}, // 181: shift_expression (LEFT_OP) ->  shift_expression LEFT_OP additive_expression
     {374, 3}, // 182: shift_expression (RIGHT_OP) ->  shift_expression RIGHT_OP additive_expression
     {375, 1}, // 183: additive_expression ->  multiplicative_expression
     {375, 3}, // 184: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
     {375, 3}, // 185: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
     {376, 1}, // 186: multiplicative_expression ->  cast_expression
     {376, 3}, // 187: multiplicative_expression ('*') ->  multiplicative_expression '*' cast_expression
     {376, 3}, // 188: multiplicative_expression ('/') ->  multiplicative_expression '/' cast_expression
     {376, 3}, // 189: multiplicative_expression ('%') ->  multiplicative_expression '%' cast_expression
     {377, 1}, // 190: cast_expression ->  unary_expression
     {377, 4}, // 191: cast_expression ('(') ->  '(' type_name ')' cast_expression
     {365, 1}, // 192: unary_expression ->  postfix_expression
     {365, 2}, // 193: unary_expression (INC_OP) ->  INC_OP unary_expression
     {365, 2}, // 194: unary_expression (DEC_OP) ->  DEC_OP unary_expression
     {365, 2}, // 195: unary_expression ->  unary_operator cast_expression
     {365, 2}, // 196: unary_expression (SIZEOF) ->  SIZEOF unary_expression
     {365, 4}, // 197: unary_expression (SIZEOF) ->  SIZEOF '(' type_name ')'
     {379, 1}, // 198: unary_operator ('&') ->  '&'
     {379, 1}, // 199: unary_operator ('*') ->  '*'
     {379, 1}, // 200: unary_operator ('+') ->  '+'
     {379, 1}, // 201: unary_operator ('-') ->  '-'
     {379, 1}, // 202: unary_operator ('~') ->  '~'
     {379, 1}, // 203: unary_operator ('!') ->  '!'
     {378, 1}, // 204: postfix_expression ->  primary_expression
     {378, 4}, // 205: postfix_expression ('[') ->  postfix_expression '[' expression ']'
     {378, 3}, // 206: postfix_expression ('(') ->  postfix_expression '(' ')'
     {378, 4}, // 207: postfix_expression ('(') ->  postfix_expression '(' argument_expression_list ')'
     {378, 3}, // 208: postfix_expression ('.') ->  postfix_expression '.' identifier
     {378, 3}, // 209: postfix_expression (PTR_OP) ->  postfix_expression PTR_OP identifier
     {378, 2}, // 210: postfix_expression (INC_OP) ->  postfix_expression INC_OP
     {378, 2}, // 211: postfix_expression (DEC_OP) ->  postfix_expression DEC_OP
     {380, 1}, // 212: primary_expression ->  identifier
     {380, 1}, // 213: primary_expression ->  constant
     {380, 1}, // 214: primary_expression ->  string
     {380, 3}, // 215: primary_expression ('(') ->  '(' expression ')'
     {381, 1}, // 216: argument_expression_list ->  assignment_expression
     {381, 3}, // 217: argument_expression_list (',') ->  argument_expression_list ',' assignment_expression
     {382, 1}, // 218: constant (INTEGER_CONSTANT) ->  INTEGER_CONSTANT
     {382, 1}, // 219: constant (CHARACTER_CONSTANT) ->  CHARACTER_CONSTANT
     {382, 1}, // 220: constant (FLOATING_CONSTANT) ->  FLOATING_CONSTANT
     {382, 1}, // 221: constant (ENUMERATION_CONSTANT) ->  ENUMERATION_CONSTANT
     {383, 1}, // 222: string (STRING_LITERAL) ->  STRING_LITERAL
     {333, 1}, // 223: identifier (IDENTIFIER) ->  IDENTIFIER
     {384, 1}, // 224: translation_unit_$ ->  translation_unit
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 39} },                             
    { {       318}, {  1} }, // translation_unit         
    { {       319}, {  2} }, // external_declaration     
    { {       320}, {  3} }, // function_definition      
    { {       321}, {  4} }, // declaration              
    { {       322}, {  5} }, // declarator               
    { {       325}, {  6} }, // declaration_specifiers   
    { {       344}, {  7} }, // direct_declarator        
    { {       345}, {  8} }, // pointer                  
    { {       327}, {  9} }, // storage_class_specifier  
    { {       328}, { 10} }, // type_specifier           
    { {       329}, { 11} }, // type_qualifier           
    { {       333}, { 12} }, // identifier               
    { {        40}, { 13} }, // '('                      
    { {        42}, { 14} }, // '*'                      
    { {       289}, { 15} }, // AUTO                     
    { {       290}, { 16} }, // REGISTER                 
    { {       288}, { 17} }, // STATIC                   
    { {       287}, { 18} }, // EXTERN                   
    { {       286}, { 19} }, // TYPEDEF                  
    { {       301}, { 20} }, // VOID                     
    { {       291}, { 21} }, // CHAR                     
    { {       292}, { 22} }, // SHORT                    
    { {       293}, { 23} }, // INT                      
    { {       294}, { 24} }, // LONG                     
    { {       297}, { 25} }, // FLOAT                    
    { {       298}, { 26} }, // DOUBLE                   
    { {       295}, { 27} }, // SIGNED                   
    { {       296}, { 28} }, // UNSIGNED                 
    { {       330}, { 29} }, // struct_or_union_specifier
    { {       331}, { 30} }, // enum_specifier           
    { {       285}, { 31} }, // TYPEDEF_NAME             
    { {       299}, { 32} }, // CONST                    
    { {       300}, { 33} }, // VOLATILE                 
    { {       257}, { 34} }, // IDENTIFIER               
    { {       332}, { 35} }, // struct_or_union          
    { {       304}, { 36} }, // ENUM                     
    { {       302}, { 37} }, // STRUCT                   
    { {       303}, { 38} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {           39} },                             
    { {       319}, {           39} }, // external_declaration     
    { {       320}, {            3} }, // function_definition      
    { {       321}, {            4} }, // declaration              
    { {       322}, {            5} }, // declarator               
    { {       325}, {            6} }, // declaration_specifiers   
    { {       344}, {            7} }, // direct_declarator        
    { {       345}, {            8} }, // pointer                  
    { {       327}, {            9} }, // storage_class_specifier  
    { {       328}, {           10} }, // type_specifier           
    { {       329}, {           11} }, // type_qualifier           
    { {       333}, {           12} }, // identifier               
    { {        40}, {           13} }, // '('                      
    { {        42}, {           14} }, // '*'                      
    { {       289}, {           15} }, // AUTO                     
    { {       290}, {           16} }, // REGISTER                 
    { {       288}, {           17} }, // STATIC                   
    { {       287}, {           18} }, // EXTERN                   
    { {       286}, {           19} }, // TYPEDEF                  
    { {       301}, {           20} }, // VOID                     
    { {       291}, {           21} }, // CHAR                     
    { {       292}, {           22} }, // SHORT                    
    { {       293}, {           23} }, // INT                      
    { {       294}, {           24} }, // LONG                     
    { {       297}, {           25} }, // FLOAT                    
    { {       298}, {           26} }, // DOUBLE                   
    { {       295}, {           27} }, // SIGNED                   
    { {       296}, {           28} }, // UNSIGNED                 
    { {       330}, {           29} }, // struct_or_union_specifier
    { {       331}, {           30} }, // enum_specifier           
    { {       285}, {           31} }, // TYPEDEF_NAME             
    { {       299}, {           32} }, // CONST                    
    { {       300}, {           33} }, // VOLATILE                 
    { {       257}, {           34} }, // IDENTIFIER               
    { {       332}, {           35} }, // struct_or_union          
    { {       304}, {           36} }, // ENUM                     
    { {       302}, {           37} }, // STRUCT                   
    { {       303}, {           38} }, // UNION                    
    { {     _EOF_}, { PARSE_ACCEPT} },                             
    { {         0}, {            0} },                             
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 32} },                             
    { {       323}, { 40} }, // compound_statement       
    { {       324}, { 41} }, // declaration_list         
    { {       123}, { 42} }, // '{'                      
    { {       321}, { 43} }, // declaration              
    { {       325}, { 44} }, // declaration_specifiers   
    { {       327}, {  9} }, // storage_class_specifier  
    { {       328}, { 10} }, // type_specifier           
    { {       329}, { 11} }, // type_qualifier           
    { {       289}, { 15} }, // AUTO                     
    { {       290}, { 16} }, // REGISTER                 
    { {       288}, { 17} }, // STATIC                   
    { {       287}, { 18} }, // EXTERN                   
    { {       286}, { 19} }, // TYPEDEF                  
    { {       301}, { 20} }, // VOID                     
    { {       291}, { 21} }, // CHAR                     
    { {       292}, { 22} }, // SHORT                    
    { {       293}, { 23} }, // INT                      
    { {       294}, { 24} }, // LONG                     
    { {       297}, { 25} }, // FLOAT                    
    { {       298}, { 26} }, // DOUBLE                   
    { {       295}, { 27} }, // SIGNED                   
    { {       296}, { 28} }, // UNSIGNED                 
    { {       330}, { 29} }, // struct_or_union_specifier
    { {       331}, { 30} }, // enum_specifier           
    { {       285}, { 31} }, // TYPEDEF_NAME             
    { {       299}, { 32} }, // CONST                    
    { {       300}, { 33} }, // VOLATILE                 
    { {       332}, { 35} }, // struct_or_union          
    { {       304}, { 36} }, // ENUM                     
    { {       302}, { 37} }, // STRUCT                   
    { {       303}, { 38} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 11} },                        
    { {       322}, { 45} }, // declarator          
    { {        59}, { 46} }, // ';'                 
    { {       326}, { 47} }, // init_declarator_list
    { {       344}, {  7} }, // direct_declarator   
    { {       345}, {  8} }, // pointer             
    { {       336}, { 48} }, // init_declarator     
    { {       333}, { 12} }, // identifier          
    { {        40}, { 13} }, // '('                 
    { {        42}, { 14} }, // '*'                 
    { {       257}, { 34} }, // IDENTIFIER          
    { {         0}, {  0} },                        
};

SR__ s_7[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, {  49} }, // '['
    { {      40}, {  50} }, // '('
    { {       0}, { -66} },       
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  5} },                     
    { {       344}, { 51} }, // direct_declarator
    { {       333}, { 12} }, // identifier       
    { {        40}, { 13} }, // '('              
    { {       257}, { 34} }, // IDENTIFIER       
    { {         0}, {  0} },                     
};

SR__ s_9[] =
{
    { { REQ_DEF}, {  28} },                             
    { {     325}, {  52} }, // declaration_specifiers   
    { {     327}, {   9} }, // storage_class_specifier  
    { {     328}, {  10} }, // type_specifier           
    { {     329}, {  11} }, // type_qualifier           
    { {     289}, {  15} }, // AUTO                     
    { {     290}, {  16} }, // REGISTER                 
    { {     288}, {  17} }, // STATIC                   
    { {     287}, {  18} }, // EXTERN                   
    { {     286}, {  19} }, // TYPEDEF                  
    { {     301}, {  20} }, // VOID                     
    { {     291}, {  21} }, // CHAR                     
    { {     292}, {  22} }, // SHORT                    
    { {     293}, {  23} }, // INT                      
    { {     294}, {  24} }, // LONG                     
    { {     297}, {  25} }, // FLOAT                    
    { {     298}, {  26} }, // DOUBLE                   
    { {     295}, {  27} }, // SIGNED                   
    { {     296}, {  28} }, // UNSIGNED                 
    { {     330}, {  29} }, // struct_or_union_specifier
    { {     331}, {  30} }, // enum_specifier           
    { {     285}, {  31} }, // TYPEDEF_NAME             
    { {     299}, {  32} }, // CONST                    
    { {     300}, {  33} }, // VOLATILE                 
    { {     332}, {  35} }, // struct_or_union          
    { {     304}, {  36} }, // ENUM                     
    { {     302}, {  37} }, // STRUCT                   
    { {     303}, {  38} }, // UNION                    
    { {       0}, { -13} },                             
};

SR__ s_10[] =
{
    { { REQ_DEF}, {  28} },                             
    { {     325}, {  53} }, // declaration_specifiers   
    { {     327}, {   9} }, // storage_class_specifier  
    { {     328}, {  10} }, // type_specifier           
    { {     329}, {  11} }, // type_qualifier           
    { {     289}, {  15} }, // AUTO                     
    { {     290}, {  16} }, // REGISTER                 
    { {     288}, {  17} }, // STATIC                   
    { {     287}, {  18} }, // EXTERN                   
    { {     286}, {  19} }, // TYPEDEF                  
    { {     301}, {  20} }, // VOID                     
    { {     291}, {  21} }, // CHAR                     
    { {     292}, {  22} }, // SHORT                    
    { {     293}, {  23} }, // INT                      
    { {     294}, {  24} }, // LONG                     
    { {     297}, {  25} }, // FLOAT                    
    { {     298}, {  26} }, // DOUBLE                   
    { {     295}, {  27} }, // SIGNED                   
    { {     296}, {  28} }, // UNSIGNED                 
    { {     330}, {  29} }, // struct_or_union_specifier
    { {     331}, {  30} }, // enum_specifier           
    { {     285}, {  31} }, // TYPEDEF_NAME             
    { {     299}, {  32} }, // CONST                    
    { {     300}, {  33} }, // VOLATILE                 
    { {     332}, {  35} }, // struct_or_union          
    { {     304}, {  36} }, // ENUM                     
    { {     302}, {  37} }, // STRUCT                   
    { {     303}, {  38} }, // UNION                    
    { {       0}, { -15} },                             
};

SR__ s_11[] =
{
    { { REQ_DEF}, {  28} },                             
    { {     325}, {  54} }, // declaration_specifiers   
    { {     327}, {   9} }, // storage_class_specifier  
    { {     328}, {  10} }, // type_specifier           
    { {     329}, {  11} }, // type_qualifier           
    { {     289}, {  15} }, // AUTO                     
    { {     290}, {  16} }, // REGISTER                 
    { {     288}, {  17} }, // STATIC                   
    { {     287}, {  18} }, // EXTERN                   
    { {     286}, {  19} }, // TYPEDEF                  
    { {     301}, {  20} }, // VOID                     
    { {     291}, {  21} }, // CHAR                     
    { {     292}, {  22} }, // SHORT                    
    { {     293}, {  23} }, // INT                      
    { {     294}, {  24} }, // LONG                     
    { {     297}, {  25} }, // FLOAT                    
    { {     298}, {  26} }, // DOUBLE                   
    { {     295}, {  27} }, // SIGNED                   
    { {     296}, {  28} }, // UNSIGNED                 
    { {     330}, {  29} }, // struct_or_union_specifier
    { {     331}, {  30} }, // enum_specifier           
    { {     285}, {  31} }, // TYPEDEF_NAME             
    { {     299}, {  32} }, // CONST                    
    { {     300}, {  33} }, // VOLATILE                 
    { {     332}, {  35} }, // struct_or_union          
    { {     304}, {  36} }, // ENUM                     
    { {     302}, {  37} }, // STRUCT                   
    { {     303}, {  38} }, // UNION                    
    { {       0}, { -17} },                             
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  8} },                     
    { {       322}, { 55} }, // declarator       
    { {       344}, {  7} }, // direct_declarator
    { {       345}, {  8} }, // pointer          
    { {       333}, { 12} }, // identifier       
    { {        40}, { 13} }, // '('              
    { {        42}, { 14} }, // '*'              
    { {       257}, { 34} }, // IDENTIFIER       
    { {         0}, {  0} },                     
};

SR__ s_14[] =
{
    { { REQ_DEF}, {   7} },                       
    { {     348}, {  56} }, // type_qualifier_list
    { {     345}, {  57} }, // pointer            
    { {     329}, {  58} }, // type_qualifier     
    { {      42}, {  14} }, // '*'                
    { {     299}, {  32} }, // CONST              
    { {     300}, {  33} }, // VOLATILE           
    { {       0}, { -75} },                       
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -223} }, 
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       333}, { 59} }, // identifier
    { {       123}, { 60} }, // '{'       
    { {       257}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       123}, { 61} }, // '{'       
    { {       333}, { 62} }, // identifier
    { {       257}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 31} },                             
    { {       323}, { 63} }, // compound_statement       
    { {       321}, { 64} }, // declaration              
    { {       123}, { 42} }, // '{'                      
    { {       325}, { 44} }, // declaration_specifiers   
    { {       327}, {  9} }, // storage_class_specifier  
    { {       328}, { 10} }, // type_specifier           
    { {       329}, { 11} }, // type_qualifier           
    { {       289}, { 15} }, // AUTO                     
    { {       290}, { 16} }, // REGISTER                 
    { {       288}, { 17} }, // STATIC                   
    { {       287}, { 18} }, // EXTERN                   
    { {       286}, { 19} }, // TYPEDEF                  
    { {       301}, { 20} }, // VOID                     
    { {       291}, { 21} }, // CHAR                     
    { {       292}, { 22} }, // SHORT                    
    { {       293}, { 23} }, // INT                      
    { {       294}, { 24} }, // LONG                     
    { {       297}, { 25} }, // FLOAT                    
    { {       298}, { 26} }, // DOUBLE                   
    { {       295}, { 27} }, // SIGNED                   
    { {       296}, { 28} }, // UNSIGNED                 
    { {       330}, { 29} }, // struct_or_union_specifier
    { {       331}, { 30} }, // enum_specifier           
    { {       285}, { 31} }, // TYPEDEF_NAME             
    { {       299}, { 32} }, // CONST                    
    { {       300}, { 33} }, // VOLATILE                 
    { {       332}, { 35} }, // struct_or_union          
    { {       304}, { 36} }, // ENUM                     
    { {       302}, { 37} }, // STRUCT                   
    { {       303}, { 38} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  89} },                             
    { {       125}, {  65} }, // '}'                      
    { {       363}, {  66} }, // statement_list           
    { {       324}, {  67} }, // declaration_list         
    { {       356}, {  68} }, // statement                
    { {       321}, {  43} }, // declaration              
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       325}, {  44} }, // declaration_specifiers   
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       327}, {   9} }, // storage_class_specifier  
    { {       328}, {  10} }, // type_specifier           
    { {       329}, {  11} }, // type_qualifier           
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       289}, {  15} }, // AUTO                     
    { {       290}, {  16} }, // REGISTER                 
    { {       288}, {  17} }, // STATIC                   
    { {       287}, {  18} }, // EXTERN                   
    { {       286}, {  19} }, // TYPEDEF                  
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {  11} },                        
    { {        59}, {  46} }, // ';'                 
    { {       326}, {  47} }, // init_declarator_list
    { {       336}, {  48} }, // init_declarator     
    { {       322}, { 123} }, // declarator          
    { {       344}, {   7} }, // direct_declarator   
    { {       345}, {   8} }, // pointer             
    { {       333}, {  12} }, // identifier          
    { {        40}, {  13} }, // '('                 
    { {        42}, {  14} }, // '*'                 
    { {       257}, {  34} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_45[] =
{
    { { REQ_DEF}, {  33} },                             
    { {     323}, { 124} }, // compound_statement       
    { {     324}, { 125} }, // declaration_list         
    { {      61}, { 126} }, // '='                      
    { {     123}, {  42} }, // '{'                      
    { {     321}, {  43} }, // declaration              
    { {     325}, {  44} }, // declaration_specifiers   
    { {     327}, {   9} }, // storage_class_specifier  
    { {     328}, {  10} }, // type_specifier           
    { {     329}, {  11} }, // type_qualifier           
    { {     289}, {  15} }, // AUTO                     
    { {     290}, {  16} }, // REGISTER                 
    { {     288}, {  17} }, // STATIC                   
    { {     287}, {  18} }, // EXTERN                   
    { {     286}, {  19} }, // TYPEDEF                  
    { {     301}, {  20} }, // VOID                     
    { {     291}, {  21} }, // CHAR                     
    { {     292}, {  22} }, // SHORT                    
    { {     293}, {  23} }, // INT                      
    { {     294}, {  24} }, // LONG                     
    { {     297}, {  25} }, // FLOAT                    
    { {     298}, {  26} }, // DOUBLE                   
    { {     295}, {  27} }, // SIGNED                   
    { {     296}, {  28} }, // UNSIGNED                 
    { {     330}, {  29} }, // struct_or_union_specifier
    { {     331}, {  30} }, // enum_specifier           
    { {     285}, {  31} }, // TYPEDEF_NAME             
    { {     299}, {  32} }, // CONST                    
    { {     300}, {  33} }, // VOLATILE                 
    { {     332}, {  35} }, // struct_or_union          
    { {     304}, {  36} }, // ENUM                     
    { {     302}, {  37} }, // STRUCT                   
    { {     303}, {  38} }, // UNION                    
    { {       0}, { -47} },                             
};

SR__ s_46[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 127} }, // ';'
    { {        44}, { 128} }, // ','
    { {         0}, {   0} },       
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {        93}, { 129} }, // ']'                      
    { {       341}, { 130} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  35} },                             
    { {        41}, { 134} }, // ')'                      
    { {       346}, { 135} }, // parameter_type_list      
    { {       347}, { 136} }, // identifier_list          
    { {       349}, { 137} }, // parameter_list           
    { {       333}, { 138} }, // identifier               
    { {       350}, { 139} }, // parameter_declaration    
    { {       257}, {  34} }, // IDENTIFIER               
    { {       325}, { 140} }, // declaration_specifiers   
    { {       327}, {   9} }, // storage_class_specifier  
    { {       328}, {  10} }, // type_specifier           
    { {       329}, {  11} }, // type_qualifier           
    { {       289}, {  15} }, // AUTO                     
    { {       290}, {  16} }, // REGISTER                 
    { {       288}, {  17} }, // STATIC                   
    { {       287}, {  18} }, // EXTERN                   
    { {       286}, {  19} }, // TYPEDEF                  
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_51[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, {  49} }, // '['
    { {      40}, {  50} }, // '('
    { {       0}, { -67} },       
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 141} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_56[] =
{
    { { REQ_DEF}, {   6} },                  
    { {     345}, { 142} }, // pointer       
    { {     329}, { 143} }, // type_qualifier
    { {      42}, {  14} }, // '*'           
    { {     299}, {  32} }, // CONST         
    { {     300}, {  33} }, // VOLATILE      
    { {       0}, { -76} },                  
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, { 144} }, // '{'
    { {       0}, { -40} },       
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       334}, { 145} }, // struct_declaration_list  
    { {       335}, { 146} }, // struct_declaration       
    { {       338}, { 147} }, // specifier_qualifier_list 
    { {       328}, { 148} }, // type_specifier           
    { {       329}, { 149} }, // type_qualifier           
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {   5} },                   
    { {       342}, { 150} }, // enumerator_list
    { {       343}, { 151} }, // enumerator     
    { {       333}, { 152} }, // identifier     
    { {       257}, {  34} }, // IDENTIFIER     
    { {         0}, {   0} },                   
};

SR__ s_62[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, { 153} }, // '{'
    { {       0}, { -61} },       
};

SR__ s_63[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       125}, { 154} }, // '}'                      
    { {       356}, { 155} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  88} },                             
    { {       125}, { 156} }, // '}'                      
    { {       363}, { 157} }, // statement_list           
    { {       321}, {  64} }, // declaration              
    { {       356}, {  68} }, // statement                
    { {       325}, {  44} }, // declaration_specifiers   
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       327}, {   9} }, // storage_class_specifier  
    { {       328}, {  10} }, // type_specifier           
    { {       329}, {  11} }, // type_qualifier           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       289}, {  15} }, // AUTO                     
    { {       290}, {  16} }, // REGISTER                 
    { {       288}, {  17} }, // STATIC                   
    { {       287}, {  18} }, // EXTERN                   
    { {       286}, {  19} }, // TYPEDEF                  
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_68[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -124} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -109} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_75[] =
{
    { { REQ_DEF}, {    2} },       
    { {      58}, {  158} }, // ':'
    { {       0}, { -212} },       
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       341}, { 159} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 160} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_78[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 161} }, // ';'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 163} }, // '('
    { {         0}, {   0} },       
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 164} }, // '('
    { {         0}, {   0} },       
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 165} }, // '('
    { {         0}, {   0} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 166} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 167} }, // '('
    { {         0}, {   0} },       
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       333}, { 168} }, // identifier
    { {       257}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 169} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 170} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        59}, { 171} }, // ';'                      
    { {       362}, { 172} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_89[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -144} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -146} }, 
};

SR__ s_91[] =
{
    { { REQ_DEF}, {   13} },                       
    { {     366}, {  173} }, // assignment_operator
    { {      61}, {  174} }, // '='                
    { {     275}, {  175} }, // MUL_ASSIGN         
    { {     276}, {  176} }, // DIV_ASSIGN         
    { {     277}, {  177} }, // MOD_ASSIGN         
    { {     278}, {  178} }, // ADD_ASSIGN         
    { {     279}, {  179} }, // SUB_ASSIGN         
    { {     280}, {  180} }, // LEFT_ASSIGN        
    { {     281}, {  181} }, // RIGHT_ASSIGN       
    { {     282}, {  182} }, // AND_ASSIGN         
    { {     283}, {  183} }, // XOR_ASSIGN         
    { {     284}, {  184} }, // OR_ASSIGN          
    { {       0}, { -190} },                       
};

SR__ s_92[] =
{
    { { REQ_DEF}, {    3} },         
    { {      63}, {  185} }, // '?'  
    { {     274}, {  186} }, // OR_OP
    { {       0}, { -159} },         
};

SR__ s_93[] =
{
    { { REQ_DEF}, {    7} },          
    { {      91}, {  187} }, // '['   
    { {      40}, {  188} }, // '('   
    { {      46}, {  189} }, // '.'   
    { {     264}, {  190} }, // PTR_OP
    { {     265}, {  191} }, // INC_OP
    { {     266}, {  192} }, // DEC_OP
    { {       0}, { -192} },          
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  24} },                        
    { {       365}, { 193} }, // unary_expression    
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {        40}, { 194} }, // '('                 
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  24} },                        
    { {       365}, { 195} }, // unary_expression    
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {        40}, { 194} }, // '('                 
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       377}, { 196} }, // cast_expression     
    { {       365}, { 132} }, // unary_expression    
    { {        40}, { 109} }, // '('                 
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  24} },                        
    { {       365}, { 197} }, // unary_expression    
    { {        40}, { 198} }, // '('                 
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_98[] =
{
    { { REQ_DEF}, {    2} },          
    { {     273}, {  199} }, // AND_OP
    { {       0}, { -162} },          
};

SR__ s_99[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -204} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -198} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -199} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -200} }, 
};

SR__ s_103[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -201} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -202} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -203} }, 
};

SR__ s_106[] =
{
    { { REQ_DEF}, {    2} },       
    { {     124}, {  200} }, // '|'
    { {       0}, { -164} },       
};

SR__ s_107[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -213} }, 
};

SR__ s_108[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -214} }, 
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {  60} },                             
    { {       362}, { 201} }, // expression               
    { {       354}, { 202} }, // type_name                
    { {       352}, {  89} }, // assignment_expression    
    { {       338}, { 203} }, // specifier_qualifier_list 
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       328}, { 148} }, // type_specifier           
    { {       329}, { 149} }, // type_qualifier           
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_110[] =
{
    { { REQ_DEF}, {    2} },       
    { {      94}, {  204} }, // '^'
    { {       0}, { -166} },       
};

SR__ s_111[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -218} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -219} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -220} }, 
};

SR__ s_114[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -221} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -222} }, 
};

SR__ s_116[] =
{
    { { REQ_DEF}, {    2} },       
    { {      38}, {  205} }, // '&'
    { {       0}, { -168} },       
};

SR__ s_117[] =
{
    { { REQ_DEF}, {    3} },         
    { {     271}, {  206} }, // EQ_OP
    { {     272}, {  207} }, // NE_OP
    { {       0}, { -170} },         
};

SR__ s_118[] =
{
    { { REQ_DEF}, {    5} },         
    { {      60}, {  208} }, // '<'  
    { {      62}, {  209} }, // '>'  
    { {     269}, {  210} }, // LE_OP
    { {     270}, {  211} }, // GE_OP
    { {       0}, { -172} },         
};

SR__ s_119[] =
{
    { { REQ_DEF}, {    3} },            
    { {     267}, {  212} }, // LEFT_OP 
    { {     268}, {  213} }, // RIGHT_OP
    { {       0}, { -175} },            
};

SR__ s_120[] =
{
    { { REQ_DEF}, {    3} },       
    { {      43}, {  214} }, // '+'
    { {      45}, {  215} }, // '-'
    { {       0}, { -180} },       
};

SR__ s_121[] =
{
    { { REQ_DEF}, {    4} },       
    { {      42}, {  216} }, // '*'
    { {      47}, {  217} }, // '/'
    { {      37}, {  218} }, // '%'
    { {       0}, { -183} },       
};

SR__ s_122[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -186} }, 
};

SR__ s_123[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, { 126} }, // '='
    { {       0}, { -47} },       
};

SR__ s_124[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       323}, { 219} }, // compound_statement       
    { {       321}, {  64} }, // declaration              
    { {       123}, {  42} }, // '{'                      
    { {       325}, {  44} }, // declaration_specifiers   
    { {       327}, {   9} }, // storage_class_specifier  
    { {       328}, {  10} }, // type_specifier           
    { {       329}, {  11} }, // type_qualifier           
    { {       289}, {  15} }, // AUTO                     
    { {       290}, {  16} }, // REGISTER                 
    { {       288}, {  17} }, // STATIC                   
    { {       287}, {  18} }, // EXTERN                   
    { {       286}, {  19} }, // TYPEDEF                  
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       337}, { 220} }, // initializer              
    { {       352}, { 221} }, // assignment_expression    
    { {       123}, { 222} }, // '{'                      
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_127[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {   9} },                     
    { {       336}, { 223} }, // init_declarator  
    { {       322}, { 123} }, // declarator       
    { {       344}, {   7} }, // direct_declarator
    { {       345}, {   8} }, // pointer          
    { {       333}, {  12} }, // identifier       
    { {        40}, {  13} }, // '('              
    { {        42}, {  14} }, // '*'              
    { {       257}, {  34} }, // IDENTIFIER       
    { {         0}, {   0} },                     
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 224} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_131[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -161} }, 
};

SR__ s_132[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -190} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -212} }, 
};

SR__ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_135[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 225} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 226} }, // ')'
    { {        44}, { 227} }, // ','
    { {         0}, {   0} },       
};

SR__ s_137[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 228} }, // ','
    { {       0}, { -81} },       
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_140[] =
{
    { { REQ_DEF}, {  11} },                              
    { {     322}, { 229} }, // declarator                
    { {     351}, { 230} }, // abstract_declarator       
    { {     344}, {   7} }, // direct_declarator         
    { {     345}, { 231} }, // pointer                   
    { {     355}, { 232} }, // direct_abstract_declarator
    { {     333}, {  12} }, // identifier                
    { {      40}, { 233} }, // '('                       
    { {      42}, {  14} }, // '*'                       
    { {      91}, { 234} }, // '['                       
    { {     257}, {  34} }, // IDENTIFIER                
    { {       0}, { -86} },                              
};

SR__ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       334}, { 235} }, // struct_declaration_list  
    { {       335}, { 146} }, // struct_declaration       
    { {       338}, { 147} }, // specifier_qualifier_list 
    { {       328}, { 148} }, // type_specifier           
    { {       329}, { 149} }, // type_qualifier           
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       125}, { 236} }, // '}'                      
    { {       335}, { 237} }, // struct_declaration       
    { {       338}, { 147} }, // specifier_qualifier_list 
    { {       328}, { 148} }, // type_specifier           
    { {       329}, { 149} }, // type_qualifier           
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {  11} },                          
    { {       339}, { 238} }, // struct_declarator_list
    { {       340}, { 239} }, // struct_declarator     
    { {       322}, { 240} }, // declarator            
    { {        58}, { 241} }, // ':'                   
    { {       344}, {   7} }, // direct_declarator     
    { {       345}, {   8} }, // pointer               
    { {       333}, {  12} }, // identifier            
    { {        40}, {  13} }, // '('                   
    { {        42}, {  14} }, // '*'                   
    { {       257}, {  34} }, // IDENTIFIER            
    { {         0}, {   0} },                          
};

SR__ s_148[] =
{
    { { REQ_DEF}, {  22} },                             
    { {     338}, { 242} }, // specifier_qualifier_list 
    { {     328}, { 148} }, // type_specifier           
    { {     329}, { 149} }, // type_qualifier           
    { {     301}, {  20} }, // VOID                     
    { {     291}, {  21} }, // CHAR                     
    { {     292}, {  22} }, // SHORT                    
    { {     293}, {  23} }, // INT                      
    { {     294}, {  24} }, // LONG                     
    { {     297}, {  25} }, // FLOAT                    
    { {     298}, {  26} }, // DOUBLE                   
    { {     295}, {  27} }, // SIGNED                   
    { {     296}, {  28} }, // UNSIGNED                 
    { {     330}, {  29} }, // struct_or_union_specifier
    { {     331}, {  30} }, // enum_specifier           
    { {     285}, {  31} }, // TYPEDEF_NAME             
    { {     299}, {  32} }, // CONST                    
    { {     300}, {  33} }, // VOLATILE                 
    { {     332}, {  35} }, // struct_or_union          
    { {     304}, {  36} }, // ENUM                     
    { {     302}, {  37} }, // STRUCT                   
    { {     303}, {  38} }, // UNION                    
    { {       0}, { -50} },                             
};

SR__ s_149[] =
{
    { { REQ_DEF}, {  22} },                             
    { {     338}, { 243} }, // specifier_qualifier_list 
    { {     328}, { 148} }, // type_specifier           
    { {     329}, { 149} }, // type_qualifier           
    { {     301}, {  20} }, // VOID                     
    { {     291}, {  21} }, // CHAR                     
    { {     292}, {  22} }, // SHORT                    
    { {     293}, {  23} }, // INT                      
    { {     294}, {  24} }, // LONG                     
    { {     297}, {  25} }, // FLOAT                    
    { {     298}, {  26} }, // DOUBLE                   
    { {     295}, {  27} }, // SIGNED                   
    { {     296}, {  28} }, // UNSIGNED                 
    { {     330}, {  29} }, // struct_or_union_specifier
    { {     331}, {  30} }, // enum_specifier           
    { {     285}, {  31} }, // TYPEDEF_NAME             
    { {     299}, {  32} }, // CONST                    
    { {     300}, {  33} }, // VOLATILE                 
    { {     332}, {  35} }, // struct_or_union          
    { {     304}, {  36} }, // ENUM                     
    { {     302}, {  37} }, // STRUCT                   
    { {     303}, {  38} }, // UNION                    
    { {       0}, { -52} },                             
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 244} }, // '}'
    { {        44}, { 245} }, // ','
    { {         0}, {   0} },       
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_152[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, { 246} }, // '='
    { {       0}, { -64} },       
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   5} },                   
    { {       342}, { 247} }, // enumerator_list
    { {       343}, { 151} }, // enumerator     
    { {       333}, { 152} }, // identifier     
    { {       257}, {  34} }, // IDENTIFIER     
    { {         0}, {   0} },                   
};

SR__ s_154[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_155[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR__ s_156[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -122} }, 
};

SR__ s_157[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       125}, { 248} }, // '}'                      
    { {       356}, { 155} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_158[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 249} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 250} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 251} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_161[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       352}, { 252} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_163[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 253} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_164[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 254} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_165[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 255} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_166[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       311}, { 256} }, // WHILE
    { {         0}, {   0} },         
};

SR__ s_167[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        59}, { 257} }, // ';'                      
    { {       362}, { 258} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_168[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 259} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_169[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR__ s_170[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -141} }, 
};

SR__ s_171[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -142} }, 
};

SR__ s_172[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 260} }, // ';'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_173[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       352}, { 261} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_174[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -148} }, 
};

SR__ s_175[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -149} }, 
};

SR__ s_176[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -150} }, 
};

SR__ s_177[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -151} }, 
};

SR__ s_178[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -152} }, 
};

SR__ s_179[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -153} }, 
};

SR__ s_180[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -154} }, 
};

SR__ s_181[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -155} }, 
};

SR__ s_182[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -156} }, 
};

SR__ s_183[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -157} }, 
};

SR__ s_184[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -158} }, 
};

SR__ s_185[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 262} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_186[] =
{
    { { REQ_TOKEN}, {  34} },                             
    { {       368}, { 263} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_187[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 264} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_188[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        41}, { 265} }, // ')'                      
    { {       381}, { 266} }, // argument_expression_list 
    { {       352}, { 267} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_189[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       333}, { 268} }, // identifier
    { {       257}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_190[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       333}, { 269} }, // identifier
    { {       257}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_191[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -210} }, 
};

SR__ s_192[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -211} }, 
};

SR__ s_193[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -193} }, 
};

SR__ s_194[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 201} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_195[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -194} }, 
};

SR__ s_196[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -195} }, 
};

SR__ s_197[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -196} }, 
};

SR__ s_198[] =
{
    { { REQ_TOKEN}, {  60} },                             
    { {       354}, { 270} }, // type_name                
    { {       362}, { 201} }, // expression               
    { {       338}, { 203} }, // specifier_qualifier_list 
    { {       352}, {  89} }, // assignment_expression    
    { {       328}, { 148} }, // type_specifier           
    { {       329}, { 149} }, // type_qualifier           
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_199[] =
{
    { { REQ_TOKEN}, {  33} },                             
    { {       369}, { 271} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_200[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       370}, { 272} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_201[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 273} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_202[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 274} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_203[] =
{
    { { REQ_DEF}, {   7} },                              
    { {     351}, { 275} }, // abstract_declarator       
    { {     345}, { 276} }, // pointer                   
    { {     355}, { 232} }, // direct_abstract_declarator
    { {      42}, {  14} }, // '*'                       
    { {      40}, { 277} }, // '('                       
    { {      91}, { 234} }, // '['                       
    { {       0}, { -95} },                              
};

SR__ s_204[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       371}, { 278} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_205[] =
{
    { { REQ_TOKEN}, {  30} },                             
    { {       372}, { 279} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_206[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       373}, { 280} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_207[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       373}, { 281} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_208[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       374}, { 282} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_209[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       374}, { 283} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_210[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       374}, { 284} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_211[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       374}, { 285} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_212[] =
{
    { { REQ_TOKEN}, {  27} },                             
    { {       375}, { 286} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_213[] =
{
    { { REQ_TOKEN}, {  27} },                             
    { {       375}, { 287} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_214[] =
{
    { { REQ_TOKEN}, {  26} },                             
    { {       376}, { 288} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_215[] =
{
    { { REQ_TOKEN}, {  26} },                             
    { {       376}, { 289} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_216[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       377}, { 290} }, // cast_expression     
    { {       365}, { 132} }, // unary_expression    
    { {        40}, { 109} }, // '('                 
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_217[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       377}, { 291} }, // cast_expression     
    { {       365}, { 132} }, // unary_expression    
    { {        40}, { 109} }, // '('                 
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_218[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       377}, { 292} }, // cast_expression     
    { {       365}, { 132} }, // unary_expression    
    { {        40}, { 109} }, // '('                 
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_219[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_220[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_221[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_222[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {       353}, { 293} }, // initializer_list         
    { {       337}, { 294} }, // initializer              
    { {       352}, { 221} }, // assignment_expression    
    { {       123}, { 222} }, // '{'                      
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_223[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_224[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_225[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_226[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_227[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       333}, { 295} }, // identifier
    { {       257}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_228[] =
{
    { { REQ_TOKEN}, {  30} },                             
    { {       305}, { 296} }, // ELIPSIS                  
    { {       350}, { 297} }, // parameter_declaration    
    { {       325}, { 140} }, // declaration_specifiers   
    { {       327}, {   9} }, // storage_class_specifier  
    { {       328}, {  10} }, // type_specifier           
    { {       329}, {  11} }, // type_qualifier           
    { {       289}, {  15} }, // AUTO                     
    { {       290}, {  16} }, // REGISTER                 
    { {       288}, {  17} }, // STATIC                   
    { {       287}, {  18} }, // EXTERN                   
    { {       286}, {  19} }, // TYPEDEF                  
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_229[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_230[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_231[] =
{
    { { REQ_DEF}, {   7} },                              
    { {     344}, {  51} }, // direct_declarator         
    { {     355}, { 298} }, // direct_abstract_declarator
    { {     333}, {  12} }, // identifier                
    { {      40}, { 233} }, // '('                       
    { {      91}, { 234} }, // '['                       
    { {     257}, {  34} }, // IDENTIFIER                
    { {       0}, { -97} },                              
};

SR__ s_232[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, { 299} }, // '['
    { {      40}, { 300} }, // '('
    { {       0}, { -98} },       
};

SR__ s_233[] =
{
    { { REQ_TOKEN}, {  42} },                              
    { {       322}, {  55} }, // declarator                
    { {       351}, { 301} }, // abstract_declarator       
    { {        41}, { 302} }, // ')'                       
    { {       346}, { 303} }, // parameter_type_list       
    { {       344}, {   7} }, // direct_declarator         
    { {       345}, { 231} }, // pointer                   
    { {       355}, { 232} }, // direct_abstract_declarator
    { {       349}, { 137} }, // parameter_list            
    { {       333}, {  12} }, // identifier                
    { {        40}, { 233} }, // '('                       
    { {        42}, {  14} }, // '*'                       
    { {        91}, { 234} }, // '['                       
    { {       350}, { 139} }, // parameter_declaration     
    { {       257}, {  34} }, // IDENTIFIER                
    { {       325}, { 140} }, // declaration_specifiers    
    { {       327}, {   9} }, // storage_class_specifier   
    { {       328}, {  10} }, // type_specifier            
    { {       329}, {  11} }, // type_qualifier            
    { {       289}, {  15} }, // AUTO                      
    { {       290}, {  16} }, // REGISTER                  
    { {       288}, {  17} }, // STATIC                    
    { {       287}, {  18} }, // EXTERN                    
    { {       286}, {  19} }, // TYPEDEF                   
    { {       301}, {  20} }, // VOID                      
    { {       291}, {  21} }, // CHAR                      
    { {       292}, {  22} }, // SHORT                     
    { {       293}, {  23} }, // INT                       
    { {       294}, {  24} }, // LONG                      
    { {       297}, {  25} }, // FLOAT                     
    { {       298}, {  26} }, // DOUBLE                    
    { {       295}, {  27} }, // SIGNED                    
    { {       296}, {  28} }, // UNSIGNED                  
    { {       330}, {  29} }, // struct_or_union_specifier 
    { {       331}, {  30} }, // enum_specifier            
    { {       285}, {  31} }, // TYPEDEF_NAME              
    { {       299}, {  32} }, // CONST                     
    { {       300}, {  33} }, // VOLATILE                  
    { {       332}, {  35} }, // struct_or_union           
    { {       304}, {  36} }, // ENUM                      
    { {       302}, {  37} }, // STRUCT                    
    { {       303}, {  38} }, // UNION                     
    { {         0}, {   0} },                              
};

SR__ s_234[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {        93}, { 304} }, // ']'                      
    { {       341}, { 305} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_235[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       125}, { 306} }, // '}'                      
    { {       335}, { 237} }, // struct_declaration       
    { {       338}, { 147} }, // specifier_qualifier_list 
    { {       328}, { 148} }, // type_specifier           
    { {       329}, { 149} }, // type_qualifier           
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_236[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_237[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_238[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 307} }, // ';'
    { {        44}, { 308} }, // ','
    { {         0}, {   0} },       
};

SR__ s_239[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_240[] =
{
    { { REQ_DEF}, {   2} },       
    { {      58}, { 309} }, // ':'
    { {       0}, { -56} },       
};

SR__ s_241[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       341}, { 310} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_242[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_243[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_244[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_245[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       343}, { 311} }, // enumerator
    { {       333}, { 152} }, // identifier
    { {       257}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_246[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       341}, { 312} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_247[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 313} }, // '}'
    { {        44}, { 245} }, // ','
    { {         0}, {   0} },       
};

SR__ s_248[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR__ s_249[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_250[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 314} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_251[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_252[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -145} }, 
};

SR__ s_253[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 315} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_254[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 316} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_255[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 317} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_256[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 318} }, // '('
    { {         0}, {   0} },       
};

SR__ s_257[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        59}, { 319} }, // ';'                      
    { {       362}, { 320} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_258[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 321} }, // ';'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_259[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -139} }, 
};

SR__ s_260[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR__ s_261[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -147} }, 
};

SR__ s_262[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        58}, { 322} }, // ':'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_263[] =
{
    { { REQ_DEF}, {    2} },          
    { {     273}, {  199} }, // AND_OP
    { {       0}, { -163} },          
};

SR__ s_264[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 323} }, // ']'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_265[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -206} }, 
};

SR__ s_266[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 324} }, // ')'
    { {        44}, { 325} }, // ','
    { {         0}, {   0} },       
};

SR__ s_267[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -216} }, 
};

SR__ s_268[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -208} }, 
};

SR__ s_269[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -209} }, 
};

SR__ s_270[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 326} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_271[] =
{
    { { REQ_DEF}, {    2} },       
    { {     124}, {  200} }, // '|'
    { {       0}, { -165} },       
};

SR__ s_272[] =
{
    { { REQ_DEF}, {    2} },       
    { {      94}, {  204} }, // '^'
    { {       0}, { -167} },       
};

SR__ s_273[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -215} }, 
};

SR__ s_274[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       377}, { 327} }, // cast_expression     
    { {       365}, { 132} }, // unary_expression    
    { {        40}, { 109} }, // '('                 
    { {       378}, {  93} }, // postfix_expression  
    { {       265}, {  94} }, // INC_OP              
    { {       266}, {  95} }, // DEC_OP              
    { {       379}, {  96} }, // unary_operator      
    { {       263}, {  97} }, // SIZEOF              
    { {       380}, {  99} }, // primary_expression  
    { {        38}, { 100} }, // '&'                 
    { {        42}, { 101} }, // '*'                 
    { {        43}, { 102} }, // '+'                 
    { {        45}, { 103} }, // '-'                 
    { {       126}, { 104} }, // '~'                 
    { {        33}, { 105} }, // '!'                 
    { {       333}, { 133} }, // identifier          
    { {       382}, { 107} }, // constant            
    { {       383}, { 108} }, // string              
    { {       257}, {  34} }, // IDENTIFIER          
    { {       258}, { 111} }, // INTEGER_CONSTANT    
    { {       260}, { 112} }, // CHARACTER_CONSTANT  
    { {       259}, { 113} }, // FLOATING_CONSTANT   
    { {       261}, { 114} }, // ENUMERATION_CONSTANT
    { {       262}, { 115} }, // STRING_LITERAL      
    { {         0}, {   0} },                        
};

SR__ s_275[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_276[] =
{
    { { REQ_DEF}, {   4} },                              
    { {     355}, { 298} }, // direct_abstract_declarator
    { {      40}, { 277} }, // '('                       
    { {      91}, { 234} }, // '['                       
    { {       0}, { -97} },                              
};

SR__ s_277[] =
{
    { { REQ_TOKEN}, {  38} },                              
    { {       351}, { 301} }, // abstract_declarator       
    { {        41}, { 302} }, // ')'                       
    { {       346}, { 303} }, // parameter_type_list       
    { {       345}, { 276} }, // pointer                   
    { {       355}, { 232} }, // direct_abstract_declarator
    { {       349}, { 137} }, // parameter_list            
    { {        42}, {  14} }, // '*'                       
    { {        40}, { 277} }, // '('                       
    { {        91}, { 234} }, // '['                       
    { {       350}, { 139} }, // parameter_declaration     
    { {       325}, { 140} }, // declaration_specifiers    
    { {       327}, {   9} }, // storage_class_specifier   
    { {       328}, {  10} }, // type_specifier            
    { {       329}, {  11} }, // type_qualifier            
    { {       289}, {  15} }, // AUTO                      
    { {       290}, {  16} }, // REGISTER                  
    { {       288}, {  17} }, // STATIC                    
    { {       287}, {  18} }, // EXTERN                    
    { {       286}, {  19} }, // TYPEDEF                   
    { {       301}, {  20} }, // VOID                      
    { {       291}, {  21} }, // CHAR                      
    { {       292}, {  22} }, // SHORT                     
    { {       293}, {  23} }, // INT                       
    { {       294}, {  24} }, // LONG                      
    { {       297}, {  25} }, // FLOAT                     
    { {       298}, {  26} }, // DOUBLE                    
    { {       295}, {  27} }, // SIGNED                    
    { {       296}, {  28} }, // UNSIGNED                  
    { {       330}, {  29} }, // struct_or_union_specifier 
    { {       331}, {  30} }, // enum_specifier            
    { {       285}, {  31} }, // TYPEDEF_NAME              
    { {       299}, {  32} }, // CONST                     
    { {       300}, {  33} }, // VOLATILE                  
    { {       332}, {  35} }, // struct_or_union           
    { {       304}, {  36} }, // ENUM                      
    { {       302}, {  37} }, // STRUCT                    
    { {       303}, {  38} }, // UNION                     
    { {         0}, {   0} },                              
};

SR__ s_278[] =
{
    { { REQ_DEF}, {    2} },       
    { {      38}, {  205} }, // '&'
    { {       0}, { -169} },       
};

SR__ s_279[] =
{
    { { REQ_DEF}, {    3} },         
    { {     271}, {  206} }, // EQ_OP
    { {     272}, {  207} }, // NE_OP
    { {       0}, { -171} },         
};

SR__ s_280[] =
{
    { { REQ_DEF}, {    5} },         
    { {      60}, {  208} }, // '<'  
    { {      62}, {  209} }, // '>'  
    { {     269}, {  210} }, // LE_OP
    { {     270}, {  211} }, // GE_OP
    { {       0}, { -173} },         
};

SR__ s_281[] =
{
    { { REQ_DEF}, {    5} },         
    { {      60}, {  208} }, // '<'  
    { {      62}, {  209} }, // '>'  
    { {     269}, {  210} }, // LE_OP
    { {     270}, {  211} }, // GE_OP
    { {       0}, { -174} },         
};

SR__ s_282[] =
{
    { { REQ_DEF}, {    3} },            
    { {     267}, {  212} }, // LEFT_OP 
    { {     268}, {  213} }, // RIGHT_OP
    { {       0}, { -176} },            
};

SR__ s_283[] =
{
    { { REQ_DEF}, {    3} },            
    { {     267}, {  212} }, // LEFT_OP 
    { {     268}, {  213} }, // RIGHT_OP
    { {       0}, { -177} },            
};

SR__ s_284[] =
{
    { { REQ_DEF}, {    3} },            
    { {     267}, {  212} }, // LEFT_OP 
    { {     268}, {  213} }, // RIGHT_OP
    { {       0}, { -178} },            
};

SR__ s_285[] =
{
    { { REQ_DEF}, {    3} },            
    { {     267}, {  212} }, // LEFT_OP 
    { {     268}, {  213} }, // RIGHT_OP
    { {       0}, { -179} },            
};

SR__ s_286[] =
{
    { { REQ_DEF}, {    3} },       
    { {      43}, {  214} }, // '+'
    { {      45}, {  215} }, // '-'
    { {       0}, { -181} },       
};

SR__ s_287[] =
{
    { { REQ_DEF}, {    3} },       
    { {      43}, {  214} }, // '+'
    { {      45}, {  215} }, // '-'
    { {       0}, { -182} },       
};

SR__ s_288[] =
{
    { { REQ_DEF}, {    4} },       
    { {      42}, {  216} }, // '*'
    { {      47}, {  217} }, // '/'
    { {      37}, {  218} }, // '%'
    { {       0}, { -184} },       
};

SR__ s_289[] =
{
    { { REQ_DEF}, {    4} },       
    { {      42}, {  216} }, // '*'
    { {      47}, {  217} }, // '/'
    { {      37}, {  218} }, // '%'
    { {       0}, { -185} },       
};

SR__ s_290[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -187} }, 
};

SR__ s_291[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -188} }, 
};

SR__ s_292[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -189} }, 
};

SR__ s_293[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 328} }, // '}'
    { {        44}, { 329} }, // ','
    { {         0}, {   0} },       
};

SR__ s_294[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_295[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_296[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_297[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_298[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, { 299} }, // '['
    { {      40}, { 300} }, // '('
    { {       0}, { -99} },       
};

SR__ s_299[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {        93}, { 330} }, // ']'                      
    { {       341}, { 331} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_300[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {        41}, { 332} }, // ')'                      
    { {       346}, { 333} }, // parameter_type_list      
    { {       349}, { 137} }, // parameter_list           
    { {       350}, { 139} }, // parameter_declaration    
    { {       325}, { 140} }, // declaration_specifiers   
    { {       327}, {   9} }, // storage_class_specifier  
    { {       328}, {  10} }, // type_specifier           
    { {       329}, {  11} }, // type_qualifier           
    { {       289}, {  15} }, // AUTO                     
    { {       290}, {  16} }, // REGISTER                 
    { {       288}, {  17} }, // STATIC                   
    { {       287}, {  18} }, // EXTERN                   
    { {       286}, {  19} }, // TYPEDEF                  
    { {       301}, {  20} }, // VOID                     
    { {       291}, {  21} }, // CHAR                     
    { {       292}, {  22} }, // SHORT                    
    { {       293}, {  23} }, // INT                      
    { {       294}, {  24} }, // LONG                     
    { {       297}, {  25} }, // FLOAT                    
    { {       298}, {  26} }, // DOUBLE                   
    { {       295}, {  27} }, // SIGNED                   
    { {       296}, {  28} }, // UNSIGNED                 
    { {       330}, {  29} }, // struct_or_union_specifier
    { {       331}, {  30} }, // enum_specifier           
    { {       285}, {  31} }, // TYPEDEF_NAME             
    { {       299}, {  32} }, // CONST                    
    { {       300}, {  33} }, // VOLATILE                 
    { {       332}, {  35} }, // struct_or_union          
    { {       304}, {  36} }, // ENUM                     
    { {       302}, {  37} }, // STRUCT                   
    { {       303}, {  38} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_301[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 334} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_302[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_303[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 335} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_304[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR__ s_305[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 336} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_306[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_307[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_308[] =
{
    { { REQ_TOKEN}, {  10} },                     
    { {       340}, { 337} }, // struct_declarator
    { {       322}, { 240} }, // declarator       
    { {        58}, { 241} }, // ':'              
    { {       344}, {   7} }, // direct_declarator
    { {       345}, {   8} }, // pointer          
    { {       333}, {  12} }, // identifier       
    { {        40}, {  13} }, // '('              
    { {        42}, {  14} }, // '*'              
    { {       257}, {  34} }, // IDENTIFIER       
    { {         0}, {   0} },                     
};

SR__ s_309[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       341}, { 338} }, // constant_expression      
    { {       364}, { 131} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_310[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_311[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_312[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_313[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_314[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_315[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 339} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_316[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 340} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_317[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 341} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_318[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       362}, { 342} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_319[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        41}, { 343} }, // ')'                      
    { {       362}, { 344} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_320[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 345} }, // ';'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_321[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        59}, { 346} }, // ';'                      
    { {       362}, { 347} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_322[] =
{
    { { REQ_TOKEN}, {  36} },                             
    { {       364}, { 348} }, // conditional_expression   
    { {       367}, {  92} }, // logical_or_expression    
    { {       368}, {  98} }, // logical_and_expression   
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {       365}, { 132} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_323[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -205} }, 
};

SR__ s_324[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -207} }, 
};

SR__ s_325[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       352}, { 349} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_326[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -197} }, 
};

SR__ s_327[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -191} }, 
};

SR__ s_328[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_329[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {       125}, { 350} }, // '}'                      
    { {       337}, { 351} }, // initializer              
    { {       352}, { 221} }, // assignment_expression    
    { {       123}, { 222} }, // '{'                      
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_330[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_331[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 352} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_332[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_333[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 353} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_334[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_335[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_336[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR__ s_337[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_338[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_339[] =
{
    { { REQ_DEF}, {    2} },        
    { {     309}, {  354} }, // ELSE
    { {       0}, { -126} },        
};

SR__ s_340[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_341[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_342[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 355} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_343[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 356} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_344[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 357} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_345[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        41}, { 358} }, // ')'                      
    { {       362}, { 359} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_346[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        41}, { 360} }, // ')'                      
    { {       362}, { 361} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_347[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 362} }, // ';'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_348[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -160} }, 
};

SR__ s_349[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -217} }, 
};

SR__ s_350[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_351[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_352[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_353[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_354[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 363} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_355[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 364} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_356[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_357[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 365} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_358[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 366} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_359[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 367} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_360[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 368} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_361[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 369} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_362[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {        41}, { 370} }, // ')'                      
    { {       362}, { 371} }, // expression               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       333}, { 133} }, // identifier               
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       257}, {  34} }, // IDENTIFIER               
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_363[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR__ s_364[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR__ s_365[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR__ s_366[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -133} }, 
};

SR__ s_367[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 372} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_368[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -135} }, 
};

SR__ s_369[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 373} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_370[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 374} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_371[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 375} }, // ')'
    { {        44}, { 162} }, // ','
    { {         0}, {   0} },       
};

SR__ s_372[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -134} }, 
};

SR__ s_373[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -136} }, 
};

SR__ s_374[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -137} }, 
};

SR__ s_375[] =
{
    { { REQ_TOKEN}, {  58} },                             
    { {       356}, { 376} }, // statement                
    { {       357}, {  69} }, // labeled_statement        
    { {       323}, {  70} }, // compound_statement       
    { {       358}, {  71} }, // expression_statement     
    { {       359}, {  72} }, // selection_statement      
    { {       360}, {  73} }, // iteration_statement      
    { {       361}, {  74} }, // jump_statement           
    { {       333}, {  75} }, // identifier               
    { {       306}, {  76} }, // CASE                     
    { {       307}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       362}, {  79} }, // expression               
    { {       308}, {  80} }, // IF                       
    { {       310}, {  81} }, // SWITCH                   
    { {       311}, {  82} }, // WHILE                    
    { {       312}, {  83} }, // DO                       
    { {       313}, {  84} }, // FOR                      
    { {       314}, {  85} }, // GOTO                     
    { {       315}, {  86} }, // CONTINUE                 
    { {       316}, {  87} }, // BREAK                    
    { {       317}, {  88} }, // RETURN                   
    { {       257}, {  34} }, // IDENTIFIER               
    { {       352}, {  89} }, // assignment_expression    
    { {       364}, {  90} }, // conditional_expression   
    { {       365}, {  91} }, // unary_expression         
    { {       367}, {  92} }, // logical_or_expression    
    { {       378}, {  93} }, // postfix_expression       
    { {       265}, {  94} }, // INC_OP                   
    { {       266}, {  95} }, // DEC_OP                   
    { {       379}, {  96} }, // unary_operator           
    { {       263}, {  97} }, // SIZEOF                   
    { {       368}, {  98} }, // logical_and_expression   
    { {       380}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       369}, { 106} }, // inclusive_or_expression  
    { {       382}, { 107} }, // constant                 
    { {       383}, { 108} }, // string                   
    { {        40}, { 109} }, // '('                      
    { {       370}, { 110} }, // exclusive_or_expression  
    { {       258}, { 111} }, // INTEGER_CONSTANT         
    { {       260}, { 112} }, // CHARACTER_CONSTANT       
    { {       259}, { 113} }, // FLOATING_CONSTANT        
    { {       261}, { 114} }, // ENUMERATION_CONSTANT     
    { {       262}, { 115} }, // STRING_LITERAL           
    { {       371}, { 116} }, // and_expression           
    { {       372}, { 117} }, // equality_expression      
    { {       373}, { 118} }, // relational_expression    
    { {       374}, { 119} }, // shift_expression         
    { {       375}, { 120} }, // additive_expression      
    { {       376}, { 121} }, // multiplicative_expression
    { {       377}, { 122} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_376[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -138} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,  s_222,  s_223,  s_224,  s_225,  s_226,  s_227,  s_228,  s_229,
  s_230,  s_231,  s_232,  s_233,  s_234,  s_235,  s_236,  s_237,  s_238,  s_239,
  s_240,  s_241,  s_242,  s_243,  s_244,  s_245,  s_246,  s_247,  s_248,  s_249,
  s_250,  s_251,  s_252,  s_253,  s_254,  s_255,  s_256,  s_257,  s_258,  s_259,
  s_260,  s_261,  s_262,  s_263,  s_264,  s_265,  s_266,  s_267,  s_268,  s_269,
  s_270,  s_271,  s_272,  s_273,  s_274,  s_275,  s_276,  s_277,  s_278,  s_279,
  s_280,  s_281,  s_282,  s_283,  s_284,  s_285,  s_286,  s_287,  s_288,  s_289,
  s_290,  s_291,  s_292,  s_293,  s_294,  s_295,  s_296,  s_297,  s_298,  s_299,
  s_300,  s_301,  s_302,  s_303,  s_304,  s_305,  s_306,  s_307,  s_308,  s_309,
  s_310,  s_311,  s_312,  s_313,  s_314,  s_315,  s_316,  s_317,  s_318,  s_319,
  s_320,  s_321,  s_322,  s_323,  s_324,  s_325,  s_326,  s_327,  s_328,  s_329,
  s_330,  s_331,  s_332,  s_333,  s_334,  s_335,  s_336,  s_337,  s_338,  s_339,
  s_340,  s_341,  s_342,  s_343,  s_344,  s_345,  s_346,  s_347,  s_348,  s_349,
  s_350,  s_351,  s_352,  s_353,  s_354,  s_355,  s_356,  s_357,  s_358,  s_359,
  s_360,  s_361,  s_362,  s_363,  s_364,  s_365,  s_366,  s_367,  s_368,  s_369,
  s_370,  s_371,  s_372,  s_373,  s_374,  s_375,  s_376,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
    }
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}




