{"name":"Cs660","tagline":"A C Compiler Front End","body":"#CS 460/660 - Compilers\r\n##University of Nevada, Reno - Spring 2013\r\n\r\n__Authors: Alex Fiannaca (@afiannac2) & Sandeep Matthew (@ThomasMadappattu)__\r\n###Contents:\r\n+ Description\r\n+ Language Features\r\n+ Implementation Details\r\n+ Assumptions\r\n+ Restrictions\r\n+ How-To Section (compiling and running the project)\r\n\r\n###Description:\r\n\r\nThis is the front end of a simple C compiler being written for the CS660\r\nCompiler course at the University of Nevada, Reno (Spring 2013). In order to\r\ncompile the scanner and parser, you must use the most recent versions of Flex\r\nand Bison, the GNU scanner and parser generators.\r\n\r\nLinks to dependencies:\r\n+ [Bison 2.7](http://ftp.gnu.org/gnu/bison/)\r\n+ [Flex 2.5.37](http://flex.sourceforge.net/)\r\n\r\nFor more information, contact [fiannac4@live.com](mailto:fiannac4@live.com)\r\n\r\n###Language Features: The C Programming Language\r\n\r\nThis compiler is for the C programming language and is based off the specification description and grammar from K&R. Advanced features of C such as the auto keyword functionality and the register keyword functionality have not been implemented.\r\n\r\n###Implementation Details\r\n\r\nThis compiler is broken down into several classes that work together to generate assembly code (currently the compiler only goes through the steps of scanning and parsing the input C file and stops before generating 3AD code). The code for this project can be accessed through the GitHub repository for the project. The main classes are as follows:\r\n+__CCompiler__: This class is the driver for the compiler. It brings together the scanner and parser in a unified manner by providing a single set of error and warning functions so that the scanner and parser do not have to implement their own. In addition, it redirects the output from the scanner and parser in a unified manner so that debugging is easier to perform. The instance of this class that is created when the program is run, can be found in the main.cpp file.\r\n+__CParser__: This class is automatically generated by Bison from the CParser.yy file.\r\n+__AVLTree__: This class is used by the symbol table to maintain a balanced tree of symbols, thereby guaranteeing efficient interaction with the symbol table. This was implemented instead of using the STL map class, since the map class does not allow any method for printing the physical structure of the tree, and therefore cannot show that the tree is balanced (a project requirement).\r\n+__SymTab__: This class is the symbol table. It allows for inserting and search for symbols and manages the scoping restrictions of the compiler.\r\n+__Type__ (and all derived classes): This set of classes is used for maintaining information about the type of a symbol. There are 8 derived classes from the base Type class: pointers, functions, unions, structs, arrays, enums, and plain old data types (PODs). These classes allow for efficient management of descriptive information such as the capacity of an array or the size of a datatype (in bytes).\r\n\r\nOther Files:\r\n+__main.cpp__: This file creates an instance of the compiler and parses the command line arguments.\r\n+__platform.h__: This file specifies the size of base types in our compiler.\r\n+__CScanner.ll__: This file is passed to Flex in order to generate a scanner for the compiler. The output scanner is written in C++ compatible C and is therefore able to be compiled into the  compiler.\r\n+__tests/__: This folder contains several test cases which can be run with the run_tests bash script.\r\n\r\n###Assumptions\r\n\r\nThere were several assumptions when creating this compiler:\r\n+ The input file will be in ASCII encoding.\r\n\r\n###Restrictions\r\n\r\n+ The main restriction in this compiler is that the compiler will abort after the first error (it will continue after warnings). We decided to do this in order to ensure that the output error is the correct error rather than outputting a series of errors in which only the first error is the real error (umm, gcc...).\r\n+ When using the run_tests script (the preferred method for testing this compiler), the output of scanner and parser debug information are written to the .ydb and .ldb files, the tokens and reductions are written to the .tok and .red files, and symbol table output is written to the standard output stream.\r\n\r\n###How To: Compile this project\r\n\r\nClone the repository using the following command:\r\n\r\n\tgit clone https://github.com/afiannac2/cs660.git\r\n\r\nThis repository is a private repository, meaning that you must be granted\r\naccess rights before you can clone the repository, but since you are\r\nreading this, I am guessing you have been given rights.\r\n\r\nExecute the following commands to compile the project:\r\n\r\n\tcd cs660/flexbison/\r\n\tmake\r\n\r\nThis will run flex and bison and then compile all of the sources to produce\r\nthe C Compiler front end executable *__ccomp__*\r\n\r\n###How To: Run this project (direct use)\r\n\r\nThe C Compiler front end can either be invoked by using the following command\r\n\r\n\t./ccomp\r\n\r\n###How To: Run this project (using the test script)\r\n\r\nA script has been written which allows you to automatically run any test *.c*\r\nfiles located in the *tests/* folder. The script can be invoked through the \r\nmakefile by running the command (after you have compiled the project)\r\n\r\n\tmake test\r\n\r\nThis will copy the compiler executable into the *tests/* folder and will\r\nrun the compiler on every *.c* file in the *tests/* folder. This will invoke\r\nthe compiler with the *-d* flag (with the l, s, and p parameters - lexer, symbol table, and parser respectively) and the *-o*\r\nflag (with an output filename of <filename>.out). In addition, it will group\r\nthe results of each attempted compilation into a folder with the same name\r\nas the input C file. Some of the test files in the *tests/* folder are designed\r\nto fail (to test error output and whatnot) and some are designed to compile\r\ncorrectly (to test things like proper input into the symbol table). The *-v* \r\nflag can also be provided to the *ccomp* executable in order to print general \r\ndebug info (this is for the developers).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}