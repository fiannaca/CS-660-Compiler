{"name":"Cs660","tagline":"A C Compiler Front End","body":"#CS 460/660 - Compilers\r\n##University of Nevada, Reno - Spring 2013\r\n\r\n__Authors: Alex Fiannaca (@afiannac2) & Sandeep Matthew (@ThomasMadappattu)__\r\n\r\n###Description:\r\n\r\nThis is the front end of a simple C compiler being written for the CS660\r\nCompiler course at the University of Nevada, Reno (Spring 2013). In order to\r\ncompile the scanner and parser, you must use the most recent versions of Flex\r\nand Bison, the GNU scanner and parser generators.\r\n\r\nLinks to dependencies:\r\n+ [Bison 2.7](http://ftp.gnu.org/gnu/bison/)\r\n+ [Flex 2.5.37](http://flex.sourceforge.net/)\r\n\r\nFor more information, contact [fiannac4@live.com](mailto:fiannac4@live.com)\r\n\r\n###How To: Compile this project\r\n\r\nClone the repository using the following command:\r\n\r\n\tgit clone https://github.com/afiannac2/cs660.git\r\n\r\nThis repository is a private repository, meaning that you must be granted\r\naccess rights before you can clone the repository, but since you are\r\nreading this, I am guessing you have been given rights.\r\n\r\nExecute the following commands to compile the project:\r\n\r\n\tcd cs660/flexbison/\r\n\tmake\r\n\r\nThis will run flex and bison and then compile all of the sources to produce\r\nthe C Compiler front end executable *__ccomp__*\r\n\r\n###How To: Run this project (direct use)\r\n\r\nThe C Compiler front end can either be invoked by using the following command\r\n\r\n\t./ccomp\r\n\r\n###How To: Run this project (using the test script)\r\n\r\nA script has been written which allows you to automatically run any test *.c*\r\nfiles located in the *tests/* folder. The script can be invoked through the \r\nmakefile by running the command (after you have compiled the project)\r\n\r\n\tmake test\r\n\r\nThis will copy the compiler executable into the *tests/* folder and will\r\nrun the compiler on every *.c* file in the *tests/* folder. This will invoke\r\nthe compiler with the *-d* flag (with the l, s, and p parameters) and the *-o*\r\nflag (with an output filename of <filename>.out). In addition, it will group\r\nthe results of each attempted compilation into a folder with the same name\r\nas the input C file. Some of the test files in the *tests/* folder are designed\r\nto fail (to test error output and whatnot) and some are designed to compile\r\ncorrectly (to test things like proper input into the symbol table). The *-v* \r\nflag can also be provided to the *ccomp* executable in order to print general \r\ndebug info (this is for the developers).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}