/** 

\mainpage University of Nevada, Reno <br/><br/> CS 660 - Compilers

__Authors:__ Alex Fiannaca & Sandeep Mathew </p><p>

__Due Date:__ 05/15/2013

__Submitted Materials: [GitHub](http://afiannac2.github.com/cs660/)__
 
###Contents:
+ Description
+ Language Features
+ Implementation Details
+ Assumptions
+ Restrictions
+ How-To Section (compiling and running the project)

###Description:

This is the front end of a simple C compiler being written for the CS660
Compiler course at the University of Nevada, Reno (Spring 2013). In order to
compile the scanner and parser, you must use the most recent versions of Flex
and Bison, the GNU scanner and parser generators. In addition, if you wish to 
generate the documentation, you must have the most recent version of Doxygen. 
Finally, this compiler was specifically targetted at generating MARS MIPS Simulator
compliant MIPS output. Therefore, all MIPS output from this compiler should be
tested in the MARS Simulator.

Links to dependencies:
+ [Bison 2.7](http://ftp.gnu.org/gnu/bison/)
+ [Flex 2.5.37](http://flex.sourceforge.net/)
+ [Doxygen](http://www.stack.nl/~dimitri/doxygen/download.html)
+ [MARS Simulator](http://courses.missouristate.edu/kenvollmar/mars/)

For more information, contact [fiannac4@live.com](mailto:fiannac4@live.com)

###Language Features: The C Programming Language

This compiler is for the C programming language and is based off the specification description and grammar from K&R. Advanced features of C such as the auto keyword functionality and the register keyword functionality have not been implemented. For 
a more specific list of what has been implemented and what has not been implemented,
please see the "Restrictions" section below.

###Implementation Details

This compiler consists of two separate programs (ccomp and tac2mips) each of which is broken down into several classes that work together to generate assembly code. The code for this project can be accessed through the GitHub repository for the project. The main classes for the ccomp front end program are as follows:
+ __CCompiler__: This class is the driver for the compiler. It brings together the scanner and parser in a unified manner by providing a single set of error and warning functions so that the scanner and parser do not have to implement their own. In addition, it redirects the output from the scanner and parser in a unified manner so that debugging is easier to perform. The instance of this class that is created when the program is run, can be found in the main.cpp file.
+ __CParser.yy__: This class is automatically generated by Bison from the CParser.yy file.
+ __AVLTree__: This class is used by the symbol table to maintain a balanced tree of symbols, thereby guaranteeing efficient interaction with the symbol table. This was implemented instead of using the STL map class, since the map class does not allow any method for printing the physical structure of the tree, and therefore cannot show that the tree is balanced (a project requirement).
+ __SymTab__: This class is the symbol table. It allows for inserting and search for symbols and manages the scoping restrictions of the compiler.
+ __Type__ (and all derived classes): This set of classes is used for maintaining information about the type of a symbol. There are 8 derived classes from the base Type class: pointers, functions, unions, structs, arrays, enums, and plain old data types (PODs). These classes allow for efficient management of descriptive information such as the capacity of an array or the size of a datatype (in bytes).

Other Files:
+ __main.cpp__: This file creates an instance of the compiler and parses the command line arguments.
+ __Platform.h__: This file specifies the size of base types in our compiler.
+ __CScanner.ll__: This file is passed to Flex in order to generate a scanner for the compiler. The output scanner is written in C++ compatible C and is therefore able to be compiled into the  compiler.
+ __tests/__: This folder contains several test cases which can be run with the run_tests bash script.

After the ccomp front end program has been run, the tac2mips compiler backend
must be run in order to translate the front end's three address code into MIPS
assembly code. The main classes of this backend program are as follows:
+ __tac2mips__: This class is the main driver for the backend translation of 3AC
to MIPS. This class manages the register allocation table, the address table, the
function table, and other miscellaneous data structures.
+ __TAC_Parser.yy__: This class is automatically generated by Bison from the TAC_Parser.yy file.
+ __AddressTable__: This class is responsible for keeping track of any variables
allocated in the program at a given point. This allows for storing variables from
a register to memory or vice-versa as needed.
+ __RegAllocTable__: This class is responsible for managing the ownership of the 
available registers throughout the program. If necessary, the register allocation
table can perform spilling when the number of required registers exceeds the number
of actual registers available in the instruction set.
+ __FunctionTable__: This class manages the functions in any given program by 
tracking the variables in a function, and the parameters to a function. This allows
for simple tracking of which registers any given parameters are in (or possibly,
the stack offset of a given parameter).
+ __Event__: This is a simple implementation of the Observer/Observable pattern
which is used by the register allocation table to inform the address table of
any changes in the register locations of variables. This implementation was created
by Tojo Thomas. See the header file Event.h for citation information.

Other Files:
+ __main.cpp__: This file creates an instance of the tac2mips compiler and runs it.
+ __TAC_Scanner.ll__: This file is passed to Flex in order to generate a scanner for
the 3AC to MIPS compiler. The output scanner is written in C++ compatible C and is therefore able to be compiled into the  compiler.

###Assumptions

There were several assumptions when creating this compiler:
+ The input file will be in ASCII encoding.

###Restrictions

+ The main restriction in this compiler is that the compiler will abort after the first error (it will continue after warnings). We decided to do this in order to ensure that the output error is the correct error rather than outputting a series of errors in which only the first error is the real error (umm, gcc...).
+ Structs are not currently supported by the compiler
+ The compiler only currently supports integer variables
+ Functions cannot currently be passed more than four integer parameters

###How To: Compile this project

Clone the repository using the following command:

	git clone https://github.com/afiannac2/cs660.git

This repository is a private repository, meaning that you must be granted
access rights before you can clone the repository, but since you are
reading this, I am guessing you have been given rights.

Execute the following commands to compile the project:

	cd cs660/flexbison/
	make

This will run flex and bison and then compile all of the sources to produce
the C Compiler front end executable __ccomp__

Next, execute these commands to compile tac2mips:

	cd mips/
	make
	cd ../

This will run flex and bison and will then compile all of the sources to produce
the C compiler back end executable __tac2mips__

###How To: Run this project

The C Compiler can either be invoked manually by using the following commands

	./ccomp -d lsp -v -o <filename>.out <filename>
	mv <filename>.out <filename>.tac
	mv <filename>.tac mips/tests/
	cd mips/
	./tac2mips <filename>.tac
	cd ../
	
or by invoking the demo.sh script (__THE PREFERRED METHOD!__)

	./demo.sh <filename>
	
When using the demo script, a test file should first be saved in the flexbison/tests/ 
directory. Then the demo script can be invoked from the flexbison/ directory by 
only passing the name of the file to the script (NOT THE PATH!).

Due to the fact that this demo script is quick a simple minded script, it will
run each of the steps in the description of the manual commands above, regardless
of whether or not one of the steps fails. Therefore, please check the output from
the script to make sure that no errors were generated by the compiler while the 
set of commands were being executed. If any of the steps generated an error message,
then the final output .tac and .asm files __are not valid and should be removed__.

###How To: Generate the GraphVis Visualization of the AST

Running the compiler will generate a *.dot* output file which represents the AST in a GraphViz format. In order to generate a PNG image of the graph, run this command
from the flexbison/ directory

    dot -Tpng vis.dot -o vis.png

Note: if you are running this code on one of the computers in the ECC, then the 
version of GraphViz on your system may not support the png output format. In that
case, the GraphViz image can be generated as a .eps image with the following command:

	dot -Teps vis.dot -o vis.eps
	
###How To: Assemble and Test the tac2mips Output

Download the MARS MIPS Simulator from the Missouri State University [website](http://courses.missouristate.edu/kenvollmar/mars/). Save the .jar file to your desktop and 
then run the following commands from the desktop directory to launch it:

	java -jar <MARS_jar_filename>
	
In the MARS environment, open the *.asm files located in the flexbison/mips/tests
folder. In the 'edit' pane for any of these assembly files, press F3 to assemble
the code, and then press F5 to run the code. For more information on the expected
output of each of the examples, click on the 'Examples' tab at the top of this 
webpage.
*/
